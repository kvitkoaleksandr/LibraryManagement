package com.example.libraryManagement.service.impl;

import com.example.libraryManagement.dto.AuthRequestDto;
import com.example.libraryManagement.dto.AuthResponseDto;
import com.example.libraryManagement.entity.User;
import com.example.libraryManagement.repository.UserRepository;
import com.example.libraryManagement.security.JwtUtil;
import com.example.libraryManagement.service.UserService;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

import java.util.Optional;

@Service
@RequiredArgsConstructor
@Slf4j // <-- –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
public class UserServiceImpl implements UserService {

    private final UserRepository userRepository;
    private final BCryptPasswordEncoder passwordEncoder;
    private final JwtUtil jwtUtil;

    @Override
    public Optional<User> findByUsername(String username) {
        log.info("–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É: {}", username);
        return userRepository.findByUsername(username);
    }

    @Override
    @Transactional
    public AuthResponseDto registerUser(AuthRequestDto request) {
        log.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", request.getUsername());

        if (userRepository.findByUsername(request.getUsername()).isPresent()) {
            log.warn("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –ª–æ–≥–∏–Ω {} —É–∂–µ –∑–∞–Ω—è—Ç!", request.getUsername());
            return new AuthResponseDto("–û—à–∏–±–∫–∞: –õ–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç!");
        }

        if (userRepository.existsByPassword(passwordEncoder.encode(request.getPassword()))) {
            log.warn("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –ø–∞—Ä–æ–ª—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!");
            return new AuthResponseDto("–û—à–∏–±–∫–∞: –ü–∞—Ä–æ–ª—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è! –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–æ–≤—ã–π.");
        }

        User user = new User(null, request.getUsername(), passwordEncoder.encode(request.getPassword()));
        userRepository.save(user);

        String token = jwtUtil.generateToken(request.getUsername());
        log.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {}", request.getUsername());
        return new AuthResponseDto(token);
    }

    @Override
    public AuthResponseDto authenticateUser(AuthRequestDto request) {
        log.info("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", request.getUsername());

        Optional<User> userOpt = userRepository.findByUsername(request.getUsername());

        if (userOpt.isPresent()) {
            User user = userOpt.get();

            // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç
            if (passwordEncoder.matches(request.getPassword(), user.getPassword())) {

                // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω (–æ–Ω –∞–∫—Ç–∏–≤–µ–Ω)
                if (jwtUtil.isTokenValid(user.getUsername())) {
                    log.warn("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É–∂–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω! –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.", request.getUsername());
                    return new AuthResponseDto("–û—à–∏–±–∫–∞: –í—ã —É–∂–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã!");
                }

                // üîπ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ —Å—Ç–∞—Ä–æ–≥–æ –Ω–µ—Ç
                String token = jwtUtil.generateToken(user.getUsername());
                log.info("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {}", request.getUsername());
                return new AuthResponseDto(token);
            }
        }

        log.warn("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {}", request.getUsername());
        return new AuthResponseDto("–û—à–∏–±–∫–∞: –õ–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã!");
    }


    @Override
    public User getCurrentUser(String username) {
        log.info("–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {}", username);
        return userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
    }
}